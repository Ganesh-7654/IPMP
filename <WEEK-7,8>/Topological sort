#include <iostream>
#include <vector>
#include <queue>

class Graph {
    int V;
    std::vector<std::vector<int>> adj;

public:
    Graph(int V) : V(V), adj(V) {}

    void add_edge(int u, int v) {
        adj[u].push_back(v);
    }

    void topological_sort() {
        std::vector<int> indegree(V, 0);
        for (int i = 0; i < V; i++)
            for (int neighbor : adj[i])
                indegree[neighbor]++;

        std::queue<int> q;
        for (int i = 0; i < V; i++)
            if (indegree[i] == 0) q.push(i);

        std::vector<int> topo_order;
        while (!q.empty()) {
            int node = q.front();
            q.pop();
            topo_order.push_back(node);

            for (int neighbor : adj[node]) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) q.push(neighbor);
            }
        }

        if (topo_order.size() != V) {
            std::cout << "Cycle detected! Topological sort not possible.\n";
            return;
        }

        std::cout << "Topological Order: ";
        for (int v : topo_order) std::cout << v << " ";
        std::cout << "\n";
    }
};

int main() {
    Graph g(6);
    g.add_edge(5, 2);
    g.add_edge(5, 0);
    g.add_edge(4, 0);
    g.add_edge(4, 1);
    g.add_edge(2, 3);
    g.add_edge(3, 1);

    g.topological_sort();
    return 0;
}
