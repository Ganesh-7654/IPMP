#include <iostream>
#include <vector>

using namespace std;

class Solution {
    int n, m;
    vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    int dfs(vector<vector<int>>& grid, int r, int c) {
        if (r < 0 || r >= n || c < 0 || c >= m || grid[r][c] == 0)
            return 0;

        grid[r][c] = 0;  
        int area = 1;  

        for (auto& d : directions)
            area += dfs(grid, r + d[0], c + d[1]);

        return area;
    }

public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        n = grid.size(), m = grid[0].size();
        int maxArea = 0;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1)
                    maxArea = max(maxArea, dfs(grid, i, j));
            }
        }
        return maxArea;
    }
};

int main() {
    vector<vector<int>> grid = {
        {0, 0, 1, 0, 0},
        {0, 1, 1, 1, 0},
        {0, 0, 1, 0, 0},
        {1, 1, 0, 0, 1}
    };

    Solution sol;
    cout << "Max Area of Island: " << sol.maxAreaOfIsland(grid) << endl;

    return 0;
}
