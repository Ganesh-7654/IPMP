#include <iostream>
#include <vector>

using namespace std;

class DSU {
    vector<int> parent, rank;

public:
    DSU(int n) {
        parent.resize(n);
        rank.resize(n, 1);
        for (int i = 0; i < n; i++) parent[i] = i;
    }

    int find(int x) {
        if (parent[x] != x)
            parent[x] = find(parent[x]);
        return parent[x];
    }

    bool unite(int x, int y) {
        int rootX = find(x), rootY = find(y);
        if (rootX == rootY) return false;  

        if (rank[rootX] > rank[rootY])
            parent[rootY] = rootX;
        else if (rank[rootX] < rank[rootY])
            parent[rootX] = rootY;
        else {
            parent[rootY] = rootX;
            rank[rootX]++;
        }
        return true;
    }
};

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        DSU dsu(n + 1);

        for (auto& edge : edges) {
            if (!dsu.unite(edge[0], edge[1]))
                return edge;
        }
        return {};
    }
};

int main() {
    vector<vector<int>> edges = {
        {1, 2}, {1, 3}, {2, 3}
    };

    Solution sol;
    vector<int> result = sol.findRedundantConnection(edges);

    cout << "Redundant Edge: [" << result[0] << ", " << result[1] << "]" << endl;

    return 0;
}
