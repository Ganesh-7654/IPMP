#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
    int n;
    vector<vector<pair<int, int>>> adj;

public:
    Graph(int n) : n(n), adj(n + 1) {}

    void addEdge(int u, int v, int w) {
        adj[u].push_back({v, w});
    }

    int networkDelayTime(int k) {
        vector<int> dist(n + 1, 1e9);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        
        dist[k] = 0;
        pq.push({0, k});
        
        while (!pq.empty()) {
            auto [time, node] = pq.top();
            pq.pop();
            
            if (time > dist[node]) continue;
            
            for (auto [neighbor, weight] : adj[node]) {
                if (dist[node] + weight < dist[neighbor]) {
                    dist[neighbor] = dist[node] + weight;
                    pq.push({dist[neighbor], neighbor});
                }
            }
        }
        
        int maxTime = 0;
        for (int i = 1; i <= n; i++) {
            if (dist[i] == 1e9) return -1;
            maxTime = max(maxTime, dist[i]);
        }
        
        return maxTime;
    }
};

int main() {
    Graph g(4);
    g.addEdge(2, 1, 1);
    g.addEdge(2, 3, 1);
    g.addEdge(3, 4, 1);

    int k = 2;
    cout << g.networkDelayTime(k) << endl;
    
    return 0;
}
