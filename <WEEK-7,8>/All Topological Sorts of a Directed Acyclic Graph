#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
    int n;
    vector<vector<int>> adj;
    vector<int> inDegree;

    void allTopologicalSorts(vector<int>& res, vector<bool>& visited) {
        bool flag = false;

        for (int i = 0; i < n; i++) {
            if (!visited[i] && inDegree[i] == 0) {
                visited[i] = true;
                res.push_back(i);

                for (int neighbor : adj[i])
                    inDegree[neighbor]--;

                allTopologicalSorts(res, visited);

                visited[i] = false;
                res.pop_back();

                for (int neighbor : adj[i])
                    inDegree[neighbor]++;

                flag = true;
            }
        }

        if (!flag) {
            for (int node : res)
                cout << node << " ";
            cout << endl;
        }
    }

public:
    Graph(int n) : n(n), adj(n), inDegree(n, 0) {}

    void addEdge(int u, int v) {
        adj[u].push_back(v);
        inDegree[v]++;
    }

    void printAllTopologicalSorts() {
        vector<bool> visited(n, false);
        vector<int> res;
        allTopologicalSorts(res, visited);
    }
};

int main() {
    Graph g(6);
    g.addEdge(5, 2);
    g.addEdge(5, 0);
    g.addEdge(4, 0);
    g.addEdge(4, 1);
    g.addEdge(2, 3);
    g.addEdge(3, 1);

    g.printAllTopologicalSorts();

    return 0;
}
