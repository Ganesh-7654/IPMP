#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int>> adj(numCourses);
        vector<int> inDegree(numCourses, 0), order;

        for (auto& pre : prerequisites) {
            adj[pre[1]].push_back(pre[0]);
            inDegree[pre[0]]++;
        }

        queue<int> q;
        for (int i = 0; i < numCourses; i++)
            if (inDegree[i] == 0) q.push(i);

        while (!q.empty()) {
            int course = q.front();
            q.pop();
            order.push_back(course);

            for (int next : adj[course])
                if (--inDegree[next] == 0)
                    q.push(next);
        }

        return order.size() == numCourses ? order : vector<int>();
    }
};

int main() {
    Solution sol;
    int numCourses = 4;
    vector<vector<int>> prerequisites = {{1, 0}, {2, 1}, {3, 2}};

    vector<int> order = sol.findOrder(numCourses, prerequisites);

    if (order.empty()) {
        cout << "No valid order exists" << endl;
    } else {
        for (int course : order)
            cout << course << " ";
        cout << endl;
    }

    return 0;
}
