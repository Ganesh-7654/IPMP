#include <iostream>
#include <vector>

class Graph {
    int V;
    std::vector<std::vector<int>> adj;

    bool dfs(int v, int parent, std::vector<bool>& visited) {
        visited[v] = true;

        for (int neighbor : adj[v]) {
            if (!visited[neighbor]) {
                if (dfs(neighbor, v, visited)) return true;
            } else if (neighbor != parent) {
                return true;  
            }
        }
        return false;
    }

public:
    Graph(int V) : V(V), adj(V) {}

    void add_edge(int u, int v) {
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    bool has_cycle() {
        std::vector<bool> visited(V, false);

        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfs(i, -1, visited)) return true;
            }
        }
        return false;
    }
};

int main() {
    Graph g(5);
    g.add_edge(0, 1);
    g.add_edge(1, 2);
    g.add_edge(2, 3);
    g.add_edge(3, 4);
    g.add_edge(4, 1);  

    std::cout << (g.has_cycle() ? "Cycle detected" : "No cycle") << "\n";
    return 0;
}
