#include <iostream>
#include <vector>

using namespace std;

class Graph {
    int n;
    vector<vector<int>> adj;
    
    bool dfs(int node, vector<bool>& visited, vector<bool>& recStack) {
        visited[node] = true;
        recStack[node] = true;
        
        for (int neighbor : adj[node]) {
            if (!visited[neighbor] && dfs(neighbor, visited, recStack))
                return true;
            else if (recStack[neighbor])
                return true;
        }
        
        recStack[node] = false;
        return false;
    }

public:
    Graph(int n) : n(n), adj(n) {}

    void addEdge(int u, int v) {
        adj[u].push_back(v);
    }

    bool hasCycle() {
        vector<bool> visited(n, false);
        vector<bool> recStack(n, false);
        
        for (int i = 0; i < n; i++)
            if (!visited[i] && dfs(i, visited, recStack))
                return true;
                
        return false;
    }
};

int main() {
    Graph g(4);
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(3, 1);

    cout << (g.hasCycle() ? "Cycle detected" : "No cycle") << endl;
    return 0;
}
