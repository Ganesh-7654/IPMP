#include <iostream>
#include <vector>

using namespace std;

class Solution {
    int n, m;
    vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

    void dfs(vector<vector<char>>& board, int r, int c) {
        if (r < 0 || r >= n || c < 0 || c >= m || board[r][c] != 'O') return;
        board[r][c] = '#';

        for (auto& d : directions)
            dfs(board, r + d[0], c + d[1]);
    }

public:
    void solve(vector<vector<char>>& board) {
        if (board.empty()) return;

        n = board.size();
        m = board[0].size();

        for (int i = 0; i < n; i++) {
            if (board[i][0] == 'O') dfs(board, i, 0);
            if (board[i][m - 1] == 'O') dfs(board, i, m - 1);
        }
        for (int j = 0; j < m; j++) {
            if (board[0][j] == 'O') dfs(board, 0, j);
            if (board[n - 1][j] == 'O') dfs(board, n - 1, j);
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '#') board[i][j] = 'O';
            }
        }
    }
};

int main() {
    vector<vector<char>> board = {
        {'X', 'X', 'X', 'X'},
        {'X', 'O', 'O', 'X'},
        {'X', 'X', 'O', 'X'},
        {'X', 'O', 'X', 'X'}
    };

    Solution sol;
    sol.solve(board);

    for (const auto& row : board) {
        for (char c : row) cout << c << " ";
        cout << endl;
    }

    return 0;
}
