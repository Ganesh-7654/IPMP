#include <iostream>
#include <vector>

using namespace std;

class Graph {
    int n;
    vector<vector<int>> adj;

    bool dfs(int node, vector<int>& state) {
        if (state[node] != 0) return state[node] == 2;
        
        state[node] = 1;
        for (int neighbor : adj[node]) {
            if (state[neighbor] == 2) continue;
            if (state[neighbor] == 1 || !dfs(neighbor, state)) return false;
        }
        
        state[node] = 2;
        return true;
    }

public:
    Graph(int n) : n(n), adj(n) {}

    void addEdge(int u, int v) {
        adj[u].push_back(v);
    }

    vector<int> findSafeNodes() {
        vector<int> state(n, 0), safeNodes;
        
        for (int i = 0; i < n; i++)
            if (dfs(i, state))
                safeNodes.push_back(i);
        
        return safeNodes;
    }
};

int main() {
    Graph g(7);
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 3);
    g.addEdge(2, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 5);
    g.addEdge(5, 6);
    g.addEdge(4, 2);

    vector<int> safeNodes = g.findSafeNodes();
    for (int node : safeNodes)
        cout << node << " ";
    cout << endl;

    return 0;
}
