#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        int n = grid.size();
        queue<pair<int, int>> q;
        vector<vector<int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1)
                    q.push({i, j});
            }
        }
        
        if (q.size() == 0 || q.size() == n * n) return -1;
        
        int distance = -1;
        
        while (!q.empty()) {
            int size = q.size();
            distance++;
            
            for (int i = 0; i < size; i++) {
                auto [r, c] = q.front();
                q.pop();
                
                for (auto& d : directions) {
                    int nr = r + d[0], nc = c + d[1];
                    if (nr >= 0 && nr < n && nc >= 0 && nc < n && grid[nr][nc] == 0) {
                        grid[nr][nc] = 1;
                        q.push({nr, nc});
                    }
                }
            }
        }
        
        return distance;
    }
};

int main() {
    vector<vector<int>> grid = {
        {0, 0, 1},
        {0, 0, 0},
        {1, 0, 0}
    };
    
    Solution sol;
    cout << sol.maxDistance() << endl;
    
    return 0;
}
