#include <iostream>

struct node {
    int val;
    node* next;
    node* down;
    node(int v) : val(v), next(nullptr), down(nullptr) {}
};

node* merge(node* a, node* b) {
    if (!a) return b;
    if (!b) return a;

    if (a->val < b->val) {
        a->down = merge(a->down, b);
        return a;
    } else {
        b->down = merge(a, b->down);
        return b;
    }
}

node* flatten(node* head) {
    if (!head || !head->next) return head;
    return merge(head, flatten(head->next));
}

void print(node* head) {
    while (head) {
        std::cout << head->val << " ";
        head = head->down;
    }
    std::cout << "\n";
}

int main() {
    node* head = new node(3);
    head->down = new node(7);
    head->down->down = new node(8);
    head->down->down->down = new node(30);

    head->next = new node(10);
    head->next->down = new node(20);

    head->next->next = new node(19);
    head->next->next->down = new node(22);
    head->next->next->down->down = new node(50);

    head->next->next->next = new node(28);
    head->next->next->next->down = new node(35);
    head->next->next->next->down->down = new node(40);
    head->next->next->next->down->down->down = new node(45);

    head = flatten(head);
    print(head);

    return 0;
}
