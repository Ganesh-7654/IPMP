#include <iostream>
#include <unordered_map>

struct node {
    int val;
    node* next;
    node* random;
    node(int v) : val(v), next(nullptr), random(nullptr) {}
};

node* clone(node* head) {
    if (!head) return nullptr;

    std::unordered_map<node*, node*> m;
    node* curr = head;

    while (curr) {
        m[curr] = new node(curr->val);
        curr = curr->next;
    }

    curr = head;
    while (curr) {
        m[curr]->next = m[curr->next];
        m[curr]->random = m[curr->random];
        curr = curr->next;
    }

    return m[head];
}

void print(node* head) {
    while (head) {
        std::cout << "val: " << head->val;
        if (head->random) std::cout << ", random: " << head->random->val;
        std::cout << "\n";
        head = head->next;
    }
}

int main() {
    node* head = new node(1);
    head->next = new node(2);
    head->next->next = new node(3);
    
    head->random = head->next->next;
    head->next->random = head;

    node* cloned = clone(head);
    print(cloned);
    
    return 0;
}
