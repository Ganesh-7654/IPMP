#include <iostream>

struct node {
    int val;
    node* left;
    node* right;
    node(int v) : val(v), left(nullptr), right(nullptr) {}
};

node* remove_outside_range(node* root, int min, int max) {
    if (!root) return nullptr;

    root->left = remove_outside_range(root->left, min, max);
    root->right = remove_outside_range(root->right, min, max);

    if (root->val < min) {
        node* right_child = root->right;
        delete root;
        return right_child;
    }
    if (root->val > max) {
        node* left_child = root->left;
        delete root;
        return left_child;
    }

    return root;
}

void inorder(node* root) {
    if (!root) return;
    inorder(root->left);
    std::cout << root->val << " ";
    inorder(root->right);
}

int main() {
    node* root = new node(20);
    root->left = new node(10);
    root->right = new node(30);
    root->left->left = new node(5);
    root->left->right = new node(15);
    root->right->left = new node(25);
    root->right->right = new node(35);

    int min = 10, max = 30;
    root = remove_outside_range(root, min, max);

    std::cout << "Inorder after trimming: ";
    inorder(root);
    std::cout << "\n";

    return 0;
}
