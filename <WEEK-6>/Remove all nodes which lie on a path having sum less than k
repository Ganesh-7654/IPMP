#include <iostream>

struct node {
    int val;
    node* left;
    node* right;
    node(int v) : val(v), left(nullptr), right(nullptr) {}
};

node* remove_nodes(node* root, int sum, int k) {
    if (!root) return nullptr;

    sum += root->val;

    root->left = remove_nodes(root->left, sum, k);
    root->right = remove_nodes(root->right, sum, k);

    if (!root->left && !root->right && sum < k) {
        delete root;
        return nullptr;
    }

    return root;
}

node* remove_short_paths(node* root, int k) {
    return remove_nodes(root, 0, k);
}

void inorder(node* root) {
    if (!root) return;
    inorder(root->left);
    std::cout << root->val << " ";
    inorder(root->right);
}

int main() {
    node* root = new node(1);
    root->left = new node(2);
    root->right = new node(3);
    root->left->left = new node(4);
    root->left->right = new node(5);
    root->right->left = new node(6);
    root->right->right = new node(7);
    root->left->left->left = new node(8);

    int k = 15;
    root = remove_short_paths(root, k);

    std::cout << "Inorder after removing short paths: ";
    inorder(root);
    std::cout << "\n";

    return 0;
}
