#include <iostream>

struct node {
    int val;
    node* left;
    node* right;
    node(int v) : val(v), left(nullptr), right(nullptr) {}
};

bool check_children_sum(node* root) {
    if (!root || (!root->left && !root->right)) 
        return true;

    int left_val = (root->left) ? root->left->val : 0;
    int right_val = (root->right) ? root->right->val : 0;

    if (root->val == left_val + right_val &&
        check_children_sum(root->left) &&
        check_children_sum(root->right))
        return true;

    return false;
}

int main() {
    node* root = new node(10);
    root->left = new node(8);
    root->right = new node(2);
    root->left->left = new node(3);
    root->left->right = new node(5);
    root->right->right = new node(2);

    if (check_children_sum(root))
        std::cout << "The tree satisfies the children sum property.\n";
    else
        std::cout << "The tree does not satisfy the children sum property.\n";

    return 0;
}
