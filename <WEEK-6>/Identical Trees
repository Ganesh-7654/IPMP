#include <iostream>

struct node {
    int val;
    node* left;
    node* right;
    node(int v) : val(v), left(nullptr), right(nullptr) {}
};

bool are_identical(node* root1, node* root2) {
    if (!root1 && !root2) return true;
    if (!root1 || !root2) return false;

    return (root1->val == root2->val) &&
           are_identical(root1->left, root2->left) &&
           are_identical(root1->right, root2->right);
}

int main() {
    node* root1 = new node(1);
    root1->left = new node(2);
    root1->right = new node(3);
    root1->left->left = new node(4);
    root1->left->right = new node(5);

    node* root2 = new node(1);
    root2->left = new node(2);
    root2->right = new node(3);
    root2->left->left = new node(4);
    root2->left->right = new node(5);

    if (are_identical(root1, root2))
        std::cout << "The trees are identical.\n";
    else
        std::cout << "The trees are not identical.\n";

    return 0;
}
