#include <iostream>
#include <climits>

struct node {
    int val;
    node* left;
    node* right;
    node(int v) : val(v), left(nullptr), right(nullptr) {}
};

bool is_bst_util(node* root, int min_val, int max_val) {
    if (!root) return true;

    if (root->val <= min_val || root->val >= max_val)
        return false;

    return is_bst_util(root->left, min_val, root->val) &&
           is_bst_util(root->right, root->val, max_val);
}

bool is_bst(node* root) {
    return is_bst_util(root, INT_MIN, INT_MAX);
}

int main() {
    node* root = new node(10);
    root->left = new node(5);
    root->right = new node(15);
    root->left->left = new node(2);
    root->left->right = new node(7);
    root->right->left = new node(12);
    root->right->right = new node(20);

    if (is_bst(root))
        std::cout << "The tree is a BST.\n";
    else
        std::cout << "The tree is not a BST.\n";

    return 0;
}
